Setup
=====

    >>> import stereotools
    >>> import cv


Finding edges and their spacing
-------------------------------

Load and prep an image

    >>> l_img = cv.LoadImage('input_img/arch_l.png')
    >>> l_img = stereotools.grayscale(l_img)
    >>> l_img = stereotools.normalise(l_img)

Get the vertical edges

    >>> l_edges = stereotools.get_vert_edges(l_img)
    >>> l_edges
    [(12, []),
     (37, []),
     (62, []),
     (87, []),
     (112, [198, 398]),
     (137, [58, 233, 388, 398]),
     (162, [378, 398]),
     (187, [18, 93, 178, 268, 368]),
     (212, [18, 173, 263, 358, 393]),
     (237, [88, 173, 263, 348, 393]),
     (262, [13, 138, 338]),
     (287, [173, 263, 338]),
     (312, [378, 433]),
     (337, []),
     (362, []),
     (387, []),
     (412, []),
     (437, []),
     (462, []),
     (487, [])]

Draw them

    >>> for row, cols in l_edges:
    ...     for col in cols:
    ...         stereotools.add_dot(l_img, row, col)

We can calculate the distances between each vertical edge and the next one

    >>> l_spacing = stereotools.calc_edge_spacing(l_edges)
    >>> l_spacing
    [[],
     [],
     [],
     [],
     [200],
     [175, 155, 10],
     [20],
     [75, 85, 90, 100],
     [155, 90, 95, 35],
     [85, 90, 85, 45],
     [125, 200],
     [90, 75],
     [55],
     [],
     [],
     [],
     [],
     [],
     [],
     []]


Finding common edges by common spacing
--------------------------------------

We get the second set of data

    >>> r_img = cv.LoadImage('input_img/arch_r.png')
    >>> r_img = stereotools.grayscale(r_img)
    >>> r_img = stereotools.normalise(r_img)
    >>> r_edges = stereotools.get_vert_edges(r_img)
    >>> r_edges
    [(12, []),
     (37, []),
     (62, []),
     (87, [248, 258]),
     (112, [123, 218, 413, 418]),
     (137, [248, 403, 413]),
     (162, [248, 388, 413]),
     (187, [38, 283, 378]),
     (212, [103, 188, 368, 408]),
     (237, [188, 278, 358]),
     (262, [278, 343]),
     (287, [173, 188, 348, 393]),
     (312, []),
     (337, []),
     (362, []),
     (387, []),
     (412, []),
     (437, []),
     (462, []),
     (487, [])]

    >>> for row, cols in r_edges:
    ...     for col in cols:
    ...         stereotools.add_dot(r_img, row, col)

    >>> r_spacing = stereotools.calc_edge_spacing(r_edges)
    >>> r_spacing
    [[],
     [],
     [],
     [10],
     [95, 195, 5],
     [155, 10],
     [140, 25],
     [245, 95],
     [85, 180, 40],
     [90, 80],
     [65],
     [15, 160, 45],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     []]

And compare

    >>> common_spacing = stereotools.get_common_spacing(l_edges, l_spacing,
    ...                                                 r_edges, r_spacing)
    >>> common_spacing
    [(112, (198, 398), (218, 413)),
     (137, (233, 388), (248, 403)),
     (137, (388, 398), (403, 413)),
     (162, (378, 398), (388, 413)),
     (187, (178, 268), (283, 378)),
     (187, (268, 368), (283, 378)),
     (212, (173, 263), (103, 188)),
     (212, (358, 393), (368, 408)),
     (237, (88, 173), (188, 278)),
     (237, (173, 263), (188, 278)),
     (237, (263, 348), (188, 278))]

Determining depth from spacing data
-----------------------------------

    >>> depths = stereotools.get_depths(common_spacing)
    >>> depths
    [17,
     15,
     15,
     12,
     107,
     12,
     73,
     13,
     103,
     15,
     72]

Some of the spacings are huge, suggesting an error. We can filter the spacing
data with the depth data.

    >>> common_spacing = stereotools.filter_spacing_by_depth(common_spacing, depths, 20)
    >>> common_spacing
    [(112, (198, 398), (218, 413)),
     (137, (233, 388), (248, 403)),
     (137, (388, 398), (403, 413)),
     (162, (378, 398), (388, 413)),
     (187, (268, 368), (283, 378)),
     (212, (358, 393), (368, 408)),
     (237, (173, 263), (188, 278))]

Tidy-up
-------

Show results

    >>> for y, (lx1, lx2), (rx1, rx2) in common_spacing:
    ...     stereotools.add_line(l_img, y, lx1, y, lx2)
    ...     stereotools.add_line(r_img, y, rx1, y, rx2)
    >>> cv.ShowImage("left", l_img);
    >>> cv.ShowImage("right", l_img);

Save for interests-sake

    >>> cv.SaveImage("output_img/arch_l.png", l_img)
    >>> cv.SaveImage("output_img/arch_r.png", r_img)

Wait for key

    >>> _ = cv.WaitKey()
